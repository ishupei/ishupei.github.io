import{_ as t,c as s,b as l,o as a}from"./app-Bmvlbfib.js";const n={};function e(r,i){return a(),s("div",null,i[0]||(i[0]=[l(`<h1 id="常量池详解" tabindex="-1"><a class="header-anchor" href="#常量池详解"><span>常量池详解</span></a></h1><h2 id="class常量池" tabindex="-1"><a class="header-anchor" href="#class常量池"><span>Class常量池</span></a></h2><p>Class文件常量池又称为静态常量池。Class文件常量池就像是编译后.class文件里自带的一份<code>物料清单和索引目录</code>。它主要包含两部分：一类是<strong>字面量</strong>，比如具体的字符串数字；另一类是<strong>符号引用</strong>，比如它用<code>java/lang/String</code>的全名来指代String这个类，用<code>println:(Ljava/lang/String;)V</code>指代println这个方法。JVM在加载类的时候，会把这些符号翻译成实际的内存地址，这个过程就叫解析。</p><ul><li><strong>位置</strong>：存储在.class文件中（磁盘上的二进制文件），是静态的、不可变的。</li><li><strong>内容</strong>： <ul><li>字面量（Literal）：如字符串&quot;Hello&quot;、数字123、final常量等</li><li>符号引用（Symbolic References）：类/接口的全限定名、字段名和描述符、方法名和描述符</li></ul></li><li><strong>关键点</strong>： <ul><li>是编译期确定的静态数据，属于Class文件的一部分</li><li>不占用运行时内存，仅作为JVM加载类的元数据参考</li></ul></li></ul><h2 id="运行时常量池" tabindex="-1"><a class="header-anchor" href="#运行时常量池"><span>运行时常量池</span></a></h2><p>运行时常量池是Class常量池在类加载到 JVM 后的一种表现形式。它是类加载过程的一部分，每个被JVM加载的类或接口，都会在方法区中生成一个对应的运行时常量池。</p><ul><li><strong>位置</strong>：方法区（元空间Metaspace，JDK8+）</li><li><strong>内容</strong>： <ul><li>包含静态常量池的所有内容（字面量、符号引用）</li><li>运行时解析后的直接引用（如类、方法、字段的实际内存地址）</li></ul></li><li><strong>关键点</strong>： <ul><li>符号引用→直接引用的解析过程发生在类加载的解析阶段</li><li>动态性：运行时可添加新的常量（如String.intern()方法），区别于静态常量池的不可变性</li></ul></li></ul><h2 id="字符串常量池" tabindex="-1"><a class="header-anchor" href="#字符串常量池"><span>字符串常量池</span></a></h2><p>JVM为了提高性能和减少内存开销，在实例化字符串常量的时候，为字符串开辟一个字符串常量池，类似于缓存区。<br> 字符串常量池底层是 HotSpot的C++实现的，它是一个<code>StringTable</code>(类似java中的 HashTable)，保存的本质上是字符串对象的引用。</p><ul><li><p><strong>位置</strong>：</p><p>Jdk1.6及之前：方法区被实现为永久代，运行时常量池在永久代，运行时常量池包含字符串常量池；<br> Jdk1.7：已经逐步开始“去永久代”，字符串常量池和静态变量被移到了堆内存中;<br> Jdk1.8及之后：永久代被移除，取而代之的是元空间。而字符串常量池里依然在堆内存中;</p><ul><li>JDK6及之前：方法区（永久代PermGen）</li><li>JDK7+：移至堆内存（Heap）</li></ul></li><li><p><strong>作用</strong>：</p><ul><li>专门存储字符串字面量和intern()方法返回的字符串引用</li><li>避免重复创建字符串对象，节省内存</li></ul></li><li><p><strong>特点</strong>：</p><ul><li>全局共享，所有线程共用同一池</li><li>使用String.intern()方法可主动将字符串加入池中</li></ul></li></ul><table><thead><tr><th style="text-align:left;">维度</th><th style="text-align:left;">静态常量池/Class文件常量池</th><th style="text-align:left;">运行时常量池</th><th style="text-align:left;">字符串常量池</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>存储位置</strong></td><td style="text-align:left;">Class文件</td><td style="text-align:left;">方法区（元空间）</td><td style="text-align:left;">堆内存（JDK7+）</td></tr><tr><td style="text-align:left;"><strong>内容</strong></td><td style="text-align:left;">字面量、符号引用</td><td style="text-align:left;">字面量、直接引用</td><td style="text-align:left;">仅字符串对象引用</td></tr><tr><td style="text-align:left;"><strong>生命周期</strong></td><td style="text-align:left;">编译期生成</td><td style="text-align:left;">类加载时生成，随类卸载回收</td><td style="text-align:left;">运行时动态维护</td></tr><tr><td style="text-align:left;"><strong>动态性</strong></td><td style="text-align:left;">静态不可变</td><td style="text-align:left;">可动态添加（如intern()）</td><td style="text-align:left;">可动态添加</td></tr></tbody></table><p><strong>简单来说：</strong></p><ul><li><p><strong>静态常量池</strong>是 <strong>“源代码”</strong> ，存在于磁盘文件里。</p></li><li><p><strong>运行时常量池</strong>是 <strong>“进程”</strong> ，是JVM将“源代码”加载到内存后执行的结果</p></li></ul><p><strong>String s = new String(&quot;abc&quot;)创建了几个对象？</strong></p><ul><li><p>若字符串常量池无&quot;abc&quot;：先在池中创建字面量对象，再在堆中创建new String对象，共2个</p></li><li><p>若池中已有&quot;abc&quot;：仅堆中创建1个对象</p></li></ul><p><strong>intern()方法的作用？</strong></p><ul><li>将字符串对象引用加入字符串常量池（若池中不存在），并返回池中引用</li></ul><p><strong>为什么JDK7将字符串常量池移到堆中？</strong></p><ul><li>避免永久代内存溢出（如大量intern()操作），且堆内存更易扩展</li></ul><p><strong>字符串常量池的数据结构？</strong></p><ul><li>本质是哈希表（类似HashMap），JDK7后改用更高效的StringTable实现</li></ul><p><strong>总结</strong></p><ul><li><p>从JDK1.7开始，字符串常量池被移动了堆内存中;</p></li><li><p>字面量赋值，会先去字符串常量池中判断是否存在相同值的字符串对象，存在则返回常量池中的引用，不存在则在常量池中创建一个新对象，并返回引用；</p></li><li><p>使用new关键字创建字符串对象，会先去字符串常量池中判断是否存在相同值的字符串对象，存在则去堆中创建一个新对象并返回；不存在也在字符串常量池和堆内存中各创建一个字符串对象，并返回堆内存中的对象引用；</p></li><li><p>常量之间的连接，Java编译器在编译期间会做优化;</p></li><li><p>连接时含有变量的,会被编译成(new StringBuilder().append(a).append(b).append(c).toString();</p></li><li><p>当调用intern(时，首先判断常量池中是否存在相同值的字符串常量，如果存在则返回该字符串的引用；如果不存在，则在常量池中增加一个相同值的字符串常量，并返回它在堆内存中的引用；</p></li><li><p>对于final修饰的变量，它在编译时被解析为常量值的一个本地拷贝存储到自己的常量池中或嵌入到它的字节码流中;</p></li><li><p>Java中的部分关键字在初始化的类中可能被提前使用而放入常量池。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //1.字符串常量池中放入了一个“hello” 2.在堆内存中创建了一个String对象存储了“hello”,使用s指向了这个对象引用</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //s1指向的是字符串常量池中“hello”的引用地址</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //s2指向的是字符串常量池中“hello”的引用地址</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s2);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   //false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s2);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,23)]))}const h=t(n,[["render",e]]),o=JSON.parse(`{"path":"/java/jvm/constant-pool.html","title":"常量池","lang":"zh-CN","frontmatter":{"title":"常量池","category":"JVM","tag":["JVM基础"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常量池\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-04T15:48:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HuPei\\",\\"url\\":\\"https://ishupei.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://ishupei.github.io/java/jvm/constant-pool.html"}],["meta",{"property":"og:site_name","content":"hupei's page"}],["meta",{"property":"og:title","content":"常量池"}],["meta",{"property":"og:description","content":"常量池详解 Class常量池 Class文件常量池又称为静态常量池。Class文件常量池就像是编译后.class文件里自带的一份物料清单和索引目录。它主要包含两部分：一类是字面量，比如具体的字符串数字；另一类是符号引用，比如它用java/lang/String的全名来指代String这个类，用println:(Ljava/lang/String;)V指..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-04T15:48:38.000Z"}],["meta",{"property":"article:tag","content":"JVM基础"}],["meta",{"property":"article:modified_time","content":"2025-09-04T15:48:38.000Z"}]],"description":"常量池详解 Class常量池 Class文件常量池又称为静态常量池。Class文件常量池就像是编译后.class文件里自带的一份物料清单和索引目录。它主要包含两部分：一类是字面量，比如具体的字符串数字；另一类是符号引用，比如它用java/lang/String的全名来指代String这个类，用println:(Ljava/lang/String;)V指..."},"git":{"createdTime":1757000918000,"updatedTime":1757000918000,"contributors":[{"name":"hupei","username":"hupei","email":"ishupei@qq.com","commits":1,"url":"https://github.com/hupei"}]},"readingTime":{"minutes":5.12,"words":1535},"filePathRelative":"java/jvm/constant-pool.md","autoDesc":true}`);export{h as comp,o as data};
