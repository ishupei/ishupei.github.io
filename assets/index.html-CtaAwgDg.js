import{_ as i,c as l,d as e,b as s,a as r,w as a,r as p,o as d,e as o}from"./app-Bmvlbfib.js";const h={},u={class:"table-of-contents"};function g(m,t){const n=p("router-link");return d(),l("div",null,[e("nav",u,[e("ul",null,[e("li",null,[r(n,{to:"#一、前置知识"},{default:a(()=>t[0]||(t[0]=[o("一、前置知识")])),_:1}),e("ul",null,[e("li",null,[r(n,{to:"#_1-1-http-请求与响应"},{default:a(()=>t[1]||(t[1]=[o("1.1 http 请求与响应")])),_:1})]),e("li",null,[r(n,{to:"#_1-比喻-http-就像点外卖"},{default:a(()=>t[2]||(t[2]=[o("1. 比喻：HTTP 就像点外卖")])),_:1})]),e("li",null,[r(n,{to:"#_2-http-请求-你下单"},{default:a(()=>t[3]||(t[3]=[o("2. HTTP 请求（你下单）")])),_:1})]),e("li",null,[r(n,{to:"#_3-http-响应-餐厅送餐"},{default:a(()=>t[4]||(t[4]=[o("3. HTTP 响应（餐厅送餐）")])),_:1})]),e("li",null,[r(n,{to:"#_4-完整流程"},{default:a(()=>t[5]||(t[5]=[o("4. 完整流程")])),_:1})]),e("li",null,[r(n,{to:"#_5-实际观察-用浏览器演示"},{default:a(()=>t[6]||(t[6]=[o("5. 实际观察（用浏览器演示）")])),_:1})]),e("li",null,[r(n,{to:"#_6-常见问题"},{default:a(()=>t[7]||(t[7]=[o("6. 常见问题")])),_:1})]),e("li",null,[r(n,{to:"#总结"},{default:a(()=>t[8]||(t[8]=[o("总结")])),_:1})]),e("li",null,[r(n,{to:"#_1-2-url-与资源"},{default:a(()=>t[9]||(t[9]=[o("1.2 URL 与资源")])),_:1})]),e("li",null,[r(n,{to:"#_1-3-mvc-架构"},{default:a(()=>t[10]||(t[10]=[o("1.3 MVC 架构")])),_:1})]),e("li",null,[r(n,{to:"#_1-4-rbac-权限模型"},{default:a(()=>t[11]||(t[11]=[o("1.4 RBAC 权限模型")])),_:1})])])]),e("li",null,[r(n,{to:"#二、技术栈介绍"},{default:a(()=>t[12]||(t[12]=[o("二、技术栈介绍")])),_:1}),e("ul",null,[e("li",null,[r(n,{to:"#_2-1-介绍-vue"},{default:a(()=>t[13]||(t[13]=[o("2.1 介绍 vue")])),_:1})]),e("li",null,[r(n,{to:"#_2-2-介绍-elementui"},{default:a(()=>t[14]||(t[14]=[o("2.2 介绍 ElementUI")])),_:1})]),e("li",null,[r(n,{to:"#_2-3-介绍-axios"},{default:a(()=>t[15]||(t[15]=[o("2.3 介绍 Axios")])),_:1})]),e("li",null,[r(n,{to:"#_2-4-介绍-spring"},{default:a(()=>t[16]||(t[16]=[o("2.4 介绍 Spring")])),_:1})]),e("li",null,[r(n,{to:"#_2-5-介绍-spring-boot"},{default:a(()=>t[17]||(t[17]=[o("2.5 介绍 Spring Boot")])),_:1})]),e("li",null,[r(n,{to:"#_2-6-介绍-spring-security"},{default:a(()=>t[18]||(t[18]=[o("2.6 介绍 Spring Security")])),_:1})]),e("li",null,[r(n,{to:"#_2-7-介绍-mybatis"},{default:a(()=>t[19]||(t[19]=[o("2.7 介绍 Mybatis")])),_:1})]),e("li",null,[r(n,{to:"#_2-8-介绍-redis"},{default:a(()=>t[20]||(t[20]=[o("2.8 介绍 Redis")])),_:1})]),e("li",null,[r(n,{to:"#_2-9-介绍-mysql"},{default:a(()=>t[21]||(t[21]=[o("2.9 介绍 MYSQL")])),_:1})]),e("li",null,[r(n,{to:"#_2-10-介绍-maven"},{default:a(()=>t[22]||(t[22]=[o("2.10 介绍 maven")])),_:1})]),e("li",null,[r(n,{to:"#_2-11-介绍-jwt"},{default:a(()=>t[23]||(t[23]=[o("2.11 介绍 JWT")])),_:1})]),e("li",null,[r(n,{to:"#_2-12-介绍-token"},{default:a(()=>t[24]||(t[24]=[o("2.12 介绍 Token")])),_:1})]),e("li",null,[r(n,{to:"#_2-13-介绍-shiro"},{default:a(()=>t[25]||(t[25]=[o("2.13 介绍 shiro")])),_:1})])])])])]),t[26]||(t[26]=s('<hr><p>本章节旨在帮助 0 基础的客户掌握必备的基础知识，以便在后期的代码讲解服务中获得更好的体验。<br> 作者：isHuPei</p><h2 id="一、前置知识" tabindex="-1"><a class="header-anchor" href="#一、前置知识"><span>一、前置知识</span></a></h2><h3 id="_1-1-http-请求与响应" tabindex="-1"><a class="header-anchor" href="#_1-1-http-请求与响应"><span>1.1 http 请求与响应</span></a></h3><div class="hint-container tip"><p class="hint-container-title">HTTP 百度百科</p><p>超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在 TCP 之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以 ASCII 形式给出；</p></div><p>可以得出：客户端发起的请求叫 HTTP 请求，服务器返回的响应叫 HTTP 响应。<br><img src="https://img0.baidu.com/it/u=597612819,1413887364&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=1332&amp;h=492" alt=""></p><p>举个浅浅的例子<br> 当你在浏览器地址栏输入<span style="color:red;"><a href="http://www.baidu.com" target="_blank" rel="noopener noreferrer">www.baidu.com</a></span>这个地址按下回车，这就属于一次请求的过程。<br> 随后百度的某台服务器返回了百度的搜索页面展现在你的浏览器上，这便是返回的响应。</p><p>用简单易懂的方式讲解 HTTP 请求与响应，可以类比 <strong>“点外卖”</strong> 的过程。以下是分步骤的讲解：</p><hr><h3 id="_1-比喻-http-就像点外卖" tabindex="-1"><a class="header-anchor" href="#_1-比喻-http-就像点外卖"><span><strong>1. 比喻：HTTP 就像点外卖</strong></span></a></h3><ul><li><strong>你（客户端）</strong>：想吃饭的人（比如用浏览器或手机 App）。</li><li><strong>餐厅的服务器（服务端）</strong>：提供饭菜的厨房。</li><li><strong>外卖小哥（网络）</strong>：负责传递信息。</li></ul><hr><h3 id="_2-http-请求-你下单" tabindex="-1"><a class="header-anchor" href="#_2-http-请求-你下单"><span><strong>2. HTTP 请求（你下单）</strong></span></a></h3><p>当你在浏览器输入网址（比如 <code>www.example.com</code>），就像在外卖 App 点餐，浏览器会发送一个 <strong>HTTP 请求</strong>，包含：</p><ul><li><strong>请求方法</strong>：告诉服务器你想干什么。 <ul><li><code>GET</code>：查看菜单（获取网页内容）。</li><li><code>POST</code>：提交订单（比如登录时发送账号密码）。</li></ul></li><li><strong>请求地址（URL）</strong>：餐厅的地址 + 菜品名（比如 <code>example.com/home</code>）。</li><li><strong>请求头（Headers）</strong>：备注信息（比如“不要香菜”，或告诉服务器你是手机还是电脑）。</li><li><strong>请求体（Body）</strong>：可选，比如提交表单时的数据（比如账号密码）。</li></ul><blockquote><p>📌 <strong>例子</strong>：<br> 你告诉外卖 App：“我要一份汉堡（GET 请求），地址是 <code>example.com/burger</code>。”</p></blockquote><hr><h3 id="_3-http-响应-餐厅送餐" tabindex="-1"><a class="header-anchor" href="#_3-http-响应-餐厅送餐"><span><strong>3. HTTP 响应（餐厅送餐）</strong></span></a></h3><p>服务器收到请求后，会返回一个 <strong>HTTP 响应</strong>，就像餐厅处理订单后送餐：</p><ul><li><strong>状态码</strong>：告诉你订单是否成功。 <ul><li><code>200 OK</code>：餐送到了（请求成功）。</li><li><code>404 Not Found</code>：菜品不存在（网页找不到）。</li><li><code>500 Server Error</code>：厨房着火了（服务器出错）。</li></ul></li><li><strong>响应头（Headers）</strong>：送餐单上的备注（比如饭菜类型、有效期）。</li><li><strong>响应体（Body）</strong>：实际内容（比如网页的 HTML 或图片）。</li></ul><blockquote><p>📌 <strong>例子</strong>：<br> 餐厅回复：“汉堡做好了（状态码 200），这是你的汉堡（HTML 内容）。”</p></blockquote><hr><h3 id="_4-完整流程" tabindex="-1"><a class="header-anchor" href="#_4-完整流程"><span><strong>4. 完整流程</strong></span></a></h3><ol><li>你在浏览器输入网址 → 发送 <strong>HTTP 请求</strong>。</li><li>服务器处理请求 → 返回 <strong>HTTP 响应</strong>。</li><li>浏览器收到响应 → 显示网页（或提示错误）。</li></ol><hr><h3 id="_5-实际观察-用浏览器演示" tabindex="-1"><a class="header-anchor" href="#_5-实际观察-用浏览器演示"><span><strong>5. 实际观察（用浏览器演示）</strong></span></a></h3><ul><li><strong>按 F12 打开开发者工具</strong> → 选择 <strong>Network（网络）</strong>。</li><li>刷新页面，你会看到每个文件的请求和响应（像外卖订单记录）。</li><li>点击任意请求，查看它的 <strong>Headers（请求头/响应头）</strong> 和 <strong>Status Code（状态码）</strong>。</li></ul><hr><h3 id="_6-常见问题" tabindex="-1"><a class="header-anchor" href="#_6-常见问题"><span><strong>6. 常见问题</strong></span></a></h3><ul><li><strong>Q：为什么有些网站是 <code>https</code>？</strong><br> A：<code>https</code> 是加密的外卖，防止别人偷看你的订单（比如密码）。</li><li><strong>Q：GET 和 POST 有什么区别？</strong><br> A：GET 是“查看”，POST 是“提交”（比如 GET 看新闻，POST 发评论）。</li></ul><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><ul><li><strong>请求</strong>：你发送订单（要什么 + 怎么要）。</li><li><strong>响应</strong>：服务器回复结果（成功/失败 + 内容）。</li></ul><p>用这种生活化的比喻，小白能快速理解 HTTP 的核心逻辑。后续再深入细节（如 Cookies、状态码等）会更轻松！</p><p>具体的请看视频：</p><h3 id="_1-2-url-与资源" tabindex="-1"><a class="header-anchor" href="#_1-2-url-与资源"><span>1.2 URL 与资源</span></a></h3><h3 id="_1-3-mvc-架构" tabindex="-1"><a class="header-anchor" href="#_1-3-mvc-架构"><span>1.3 MVC 架构</span></a></h3><h3 id="_1-4-rbac-权限模型" tabindex="-1"><a class="header-anchor" href="#_1-4-rbac-权限模型"><span>1.4 RBAC 权限模型</span></a></h3><h2 id="二、技术栈介绍" tabindex="-1"><a class="header-anchor" href="#二、技术栈介绍"><span>二、技术栈介绍</span></a></h2><h3 id="_2-1-介绍-vue" tabindex="-1"><a class="header-anchor" href="#_2-1-介绍-vue"><span>2.1 介绍 vue</span></a></h3><p>Vue 是目前最主流的前端三大框架(Vue、React 和 Angular)之一。采用 MVVM 设计模式，帮助开发者更加快速的构建起前端应用。<br> 特点是：上手快、数据视图双向绑定、便于组件化开发（可不答特点）</p><p>提一嘴：我这边的前端用的是 vue2 写的。<br> 老师追问：vue2 与 vue3 有什么区别？Vue2 使⽤的是选项类型 API，Vue3 使⽤的是合成型 API，数据绑定跟数据监视实现上有所区别。</p><h3 id="_2-2-介绍-elementui" tabindex="-1"><a class="header-anchor" href="#_2-2-介绍-elementui"><span>2.2 介绍 ElementUI</span></a></h3><p>官方网站：<a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener noreferrer">https://element.eleme.cn/#/zh-CN/component/installation</a></p><p>ElementUI 是饿了么前端出品的一套基于 Vue 封装的 UI 组件库。开发者引入 element 的依赖后，需要什么组件复制粘贴到自己的项目里面，改改就可以用了。</p><p>个人建议：保存到书签、老师问道的话边解释边打开网址。</p><h3 id="_2-3-介绍-axios" tabindex="-1"><a class="header-anchor" href="#_2-3-介绍-axios"><span>2.3 介绍 Axios</span></a></h3><p>Axios 是一个基于 promise 的网络请求库，可以用于浏览器和 nodejs。用于前端向后端发送异步网络请求。</p><h3 id="_2-4-介绍-spring" tabindex="-1"><a class="header-anchor" href="#_2-4-介绍-spring"><span>2.4 介绍 Spring</span></a></h3><p>如果把 java（企业级）解决方案分为两个阶段的话，前半段是 JavaEE，后半程最为瞩目的就是 spring，已流行了 15 年之久，他目前可以说整合了所有企业级开发需要的技术组件（SpringSecurity、SpringCloud、SpringBoot），可以说是生命力最旺盛的一个产品。</p><h3 id="_2-5-介绍-spring-boot" tabindex="-1"><a class="header-anchor" href="#_2-5-介绍-spring-boot"><span>2.5 介绍 Spring Boot</span></a></h3><p>Spring Boot 是 Spring 全家桶中的一套快速配置脚手架，基于 spring Boot 我们可以快速开发单个微服务应用。采用约定大于配置的设计理念，无需进行繁琐的 xml 整合配置,并且内嵌了 web 服务器(Tomcat、Jetty 等)，做到了开箱即用。大大降低了 spring 的学习门槛，提高了开发效率。</p><h3 id="_2-6-介绍-spring-security" tabindex="-1"><a class="header-anchor" href="#_2-6-介绍-spring-security"><span>2.6 介绍 Spring Security</span></a></h3><p>Spring Security 是 Spring 家族中的安全框架，可以用来做用户验证和权限管理等。Spring Security 是一款重型框架，不过功能十分强大。 SpringSecurity 采用的是责任链的设计模式，是一堆过滤器链的组合，它有一条很长的过滤器链。 一般来说，如果项目中需要进行权限管理，具有多个角色和多种权限，我们可以使用 Spring Security。</p><h3 id="_2-7-介绍-mybatis" tabindex="-1"><a class="header-anchor" href="#_2-7-介绍-mybatis"><span>2.7 介绍 Mybatis</span></a></h3><p>mybatis 是 apache 基金会的一个开源项目，是一个基于 java 的持久层框架。它封装了传统的 JDBC 的连接数据库代码，在数据映射、结果集的检索方面做了充足的优化，让开发者能够更轻松地操作关系型数据库。并且 spring 框架能够无缝整合 mybatis，这也使得 springboot+mybatis 的解决方案成为快速搭建 java 单体项目的主流。</p><h3 id="_2-8-介绍-redis" tabindex="-1"><a class="header-anchor" href="#_2-8-介绍-redis"><span>2.8 介绍 Redis</span></a></h3><p>Redis 是一种 NoSQL(not-only sql,非关系型数据库)的缓存数据库，相比 MYSQL 等关系型数据库，它拥有十分优秀的性能，数据是存储在内存中，读写速度非常快。在本系统中，验证码、数据字典等数据的存储使用到了 redis 数据库。</p><h3 id="_2-9-介绍-mysql" tabindex="-1"><a class="header-anchor" href="#_2-9-介绍-mysql"><span>2.9 介绍 MYSQL</span></a></h3><p>略</p><h3 id="_2-10-介绍-maven" tabindex="-1"><a class="header-anchor" href="#_2-10-介绍-maven"><span>2.10 介绍 maven</span></a></h3><p>Maven 不仅是一个快速构建工具，还是一个优秀的依赖管理工具和项目管理工具。<br> 使用 maven 管理项目其优点如下：<br> 1、其内置了许多模板可以帮助我们快速构建项目。<br> 2、提供中央仓库，在 pom.xml 文件中引入代码即可自动下载导入相应的依赖 jar 包。<br> 3、项目的子模块之间可以相互通讯，便于项目的解耦合。<br> 4、可以直接通过 Maven 打包 war 或者 jar 项目。</p><h3 id="_2-11-介绍-jwt" tabindex="-1"><a class="header-anchor" href="#_2-11-介绍-jwt"><span>2.11 介绍 JWT</span></a></h3><p>JWT(全称：Json Web Token)是一个传输信息的标准。用于协议 JSON 对象在前后端之间是否能够安全可靠地传输信息。因为 JWT 本身是一串数字签名的缘故，所以该签名信息可以被认证和信任。简单点说就是一种认证机制，让后台知道该请求是来自于受信的客户端。比如：在登陆页面点击登录按钮时，会向后端发送一个 axios 请求。后端页面在校验用户名密码等登陆信息通过后，除了返回响应数据，还通过 JWT 会给前端返回一个生成的 token 令牌，客户端可以把该 token 存储起来，在随后每次向后端发送请求过程中，同时携带 token 令牌，后端会对带过来的这个 token 进行验证，验证通过才能进行后续操作。</p><h3 id="_2-12-介绍-token" tabindex="-1"><a class="header-anchor" href="#_2-12-介绍-token"><span>2.12 介绍 Token</span></a></h3><p>token 的意思是“令牌”，是服务端生成的一串加密字符串（服务器端并不进行保存），作为客户端进行请求的一个标识。当用户第一次登录后，服务器生成一个 token 并将此 token 返回给客户端浏览器，以后客户端只需带上这个 token 前来请求数据即可，无需再次带上用户名和密码。</p><h3 id="_2-13-介绍-shiro" tabindex="-1"><a class="header-anchor" href="#_2-13-介绍-shiro"><span>2.13 介绍 shiro</span></a></h3><p>Shiro 是 Apache 旗下一款安全权限框架。它功能强大易于上手，实现了对于权限的控制，是由 java 语言实现的。通过将与安全认证有关的功能封装管理，对外暴露一个简单易用的 API 提供身份验证、授权、加密会话管理等功能。其认证授权过程如图 2-2-1 所示。<br> Shiro 核心组件</p><ol><li>UsernamePasswordToken，Shiro 用来封装用户登录信息，使用用户的登录信息来创建令牌 Token。</li><li>SecurityManager，Shiro 的核心部分，管理所有 Subject，负责安全认证和授权。</li><li>Suject，Shiro 的一个抽象概念，包含了当前用户信息。</li><li>Realm，开发者自定义的模块，根据需求，在 Realm 中完成验证授权的逻辑。</li><li>AuthenticationInfo，用户的角色信息集合，认证时使用。</li><li>AuthorzationInfo，角色的权限信息集合，授权时使用。</li><li>DefaultWebSecurityManager，安全管理器，开发者自定义的 Realm 需要注入到 DefaultWebSecurityManager 进行管理才能生效。</li><li>ShiroFilterFactoryBean，过滤器工厂，Shiro 的基本运行机制是开发者定制规则，Shiro 去执行，具体的执行操作就是由 ShiroFilterFactoryBean 创建的一个个 Filter 对象来完成。</li></ol>',69))])}const T=i(h,[["render",g]]),f=JSON.parse(`{"path":"/other/","title":"视频合集","lang":"zh-CN","frontmatter":{"title":"视频合集","index":false,"icon":"laptop-code","category":["使用指南"],"description":"本章节旨在帮助 0 基础的客户掌握必备的基础知识，以便在后期的代码讲解服务中获得更好的体验。 作者：isHuPei 一、前置知识 1.1 http 请求与响应 HTTP 百度百科 超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在 TCP 之上。它指定了客户端可能发送给服务器什么...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"视频合集\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-03T19:25:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HuPei\\",\\"url\\":\\"https://ishupei.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://ishupei.github.io/other/"}],["meta",{"property":"og:site_name","content":"hupei's page"}],["meta",{"property":"og:title","content":"视频合集"}],["meta",{"property":"og:description","content":"本章节旨在帮助 0 基础的客户掌握必备的基础知识，以便在后期的代码讲解服务中获得更好的体验。 作者：isHuPei 一、前置知识 1.1 http 请求与响应 HTTP 百度百科 超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在 TCP 之上。它指定了客户端可能发送给服务器什么..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-03T19:25:05.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-03T19:25:05.000Z"}]]},"git":{"createdTime":1681720744000,"updatedTime":1756927505000,"contributors":[{"name":"hupei","username":"hupei","email":"ishupei@qq.com","commits":7,"url":"https://github.com/hupei"}]},"readingTime":{"minutes":8.58,"words":2573},"filePathRelative":"other/README.md","autoDesc":true}`);export{T as comp,f as data};
