import{_ as e,c as a,b as l,o as i}from"./app-Bmvlbfib.js";const n={};function s(r,t){return i(),a("div",null,t[0]||(t[0]=[l('<h1 id="java-集合" tabindex="-1"><a class="header-anchor" href="#java-集合"><span>Java 集合</span></a></h1><h2 id="java-集合概述" tabindex="-1"><a class="header-anchor" href="#java-集合概述"><span>Java 集合概述</span></a></h2><p>Java 集合，也叫作容器，主要是由两大接口派生而来：一个是<code>Collection</code>接口，主要用于存放单一元素；另一个是<code>Map</code>接口，主要用于存放键值对。<br><img src="https://gitee.com/ishupei/picgo_img/raw/master/typora/java-collection-hierarchy.png" alt="java-collection-hierarchy" loading="lazy"></p><h3 id="_1-collection-接口" tabindex="-1"><a class="header-anchor" href="#_1-collection-接口"><span>1. Collection 接口</span></a></h3><p>存放单一元素</p><p><strong>主要子接口：</strong></p><ul><li><strong>List</strong>：有序、可重复</li><li><strong>Set</strong>：不可重复</li><li><strong>Queue</strong>：按特定规则排序，有序、可重复</li></ul><h3 id="_2-map-接口" tabindex="-1"><a class="header-anchor" href="#_2-map-接口"><span>2. Map 接口</span></a></h3><p>存放键值对(key-value)</p><h2 id="collection-接口详解" tabindex="-1"><a class="header-anchor" href="#collection-接口详解"><span>Collection 接口详解</span></a></h2><h3 id="_1-list-实现类对比" tabindex="-1"><a class="header-anchor" href="#_1-list-实现类对比"><span>1. List 实现类对比</span></a></h3><table><thead><tr><th style="text-align:left;">实现类</th><th style="text-align:left;">底层结构</th><th style="text-align:left;">特点</th><th style="text-align:left;">线程安全</th></tr></thead><tbody><tr><td style="text-align:left;">ArrayList</td><td style="text-align:left;">动态数组</td><td style="text-align:left;">查询快，增删慢</td><td style="text-align:left;">不安全</td></tr><tr><td style="text-align:left;">Vector</td><td style="text-align:left;">动态数组</td><td style="text-align:left;">线程安全（synchronized）</td><td style="text-align:left;">安全</td></tr><tr><td style="text-align:left;">LinkedList</td><td style="text-align:left;">双向链表</td><td style="text-align:left;">增删快，查询慢</td><td style="text-align:left;">不安全</td></tr></tbody></table><p><strong>ArrayList vs LinkedList：</strong></p><ul><li><strong>插入性能</strong>： <ul><li>ArrayList 头插 O(n)，尾插 O(1)</li><li>LinkedList 头尾插都是 O(1)</li></ul></li><li><strong>内存占用</strong>： <ul><li>ArrayList 会有预留空间</li><li>LinkedList 每个节点需存储前后指针</li></ul></li></ul><h3 id="_2-set-实现类对比" tabindex="-1"><a class="header-anchor" href="#_2-set-实现类对比"><span>2. Set 实现类对比</span></a></h3><table><thead><tr><th style="text-align:left;">实现类</th><th style="text-align:left;">底层结构</th><th style="text-align:left;">特点</th><th style="text-align:left;">排序方式</th></tr></thead><tbody><tr><td style="text-align:left;">HashSet</td><td style="text-align:left;">HashMap</td><td style="text-align:left;">无序</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:left;">LinkedHashSet</td><td style="text-align:left;">LinkedHashMap</td><td style="text-align:left;">按插入顺序</td><td style="text-align:left;">插入顺序</td></tr><tr><td style="text-align:left;">TreeSet</td><td style="text-align:left;">红黑树</td><td style="text-align:left;">自动排序</td><td style="text-align:left;">自然排序/定制排序</td></tr></tbody></table><h2 id="map-接口详解" tabindex="-1"><a class="header-anchor" href="#map-接口详解"><span>Map 接口详解</span></a></h2><h3 id="_1-主要实现类对比" tabindex="-1"><a class="header-anchor" href="#_1-主要实现类对比"><span>1. 主要实现类对比</span></a></h3><table><thead><tr><th style="text-align:left;">实现类</th><th style="text-align:left;">底层结构</th><th style="text-align:left;">线程安全</th><th style="text-align:left;">允许 null 键值</th></tr></thead><tbody><tr><td style="text-align:left;">HashMap</td><td style="text-align:left;">数组+链表/红黑树</td><td style="text-align:left;">不安全</td><td style="text-align:left;">允许</td></tr><tr><td style="text-align:left;">LinkedHashMap</td><td style="text-align:left;">链表+哈希表</td><td style="text-align:left;">不安全</td><td style="text-align:left;">允许</td></tr><tr><td style="text-align:left;">TreeMap</td><td style="text-align:left;">红黑树</td><td style="text-align:left;">不安全</td><td style="text-align:left;">键不能为 null</td></tr><tr><td style="text-align:left;">ConcurrentHashMap</td><td style="text-align:left;">分段锁/CAS</td><td style="text-align:left;">安全</td><td style="text-align:left;">不允许</td></tr></tbody></table><h3 id="_2-hashmap-核心机制" tabindex="-1"><a class="header-anchor" href="#_2-hashmap-核心机制"><span>2. HashMap 核心机制</span></a></h3><ul><li><strong>扩容机制</strong>：默认容量 16，负载因子 0.75，扩容 2 倍</li><li><strong>哈希冲突解决</strong>： <ul><li>链表长度 &gt; 8 且数组长度 ≥ 64 时转为红黑树</li><li>红黑树节点数 &lt; 6 时退化为链表</li></ul></li></ul><h2 id="queue-deque" tabindex="-1"><a class="header-anchor" href="#queue-deque"><span>Queue/Deque</span></a></h2><h3 id="_1-queue-方法对比" tabindex="-1"><a class="header-anchor" href="#_1-queue-方法对比"><span>1. Queue 方法对比</span></a></h3><table><thead><tr><th style="text-align:left;">操作</th><th style="text-align:left;">抛出异常方法</th><th style="text-align:left;">返回特殊值方法</th></tr></thead><tbody><tr><td style="text-align:left;">插入队尾</td><td style="text-align:left;">add(e)</td><td style="text-align:left;">offer(e)</td></tr><tr><td style="text-align:left;">删除队首</td><td style="text-align:left;">remove()</td><td style="text-align:left;">poll()</td></tr><tr><td style="text-align:left;">查询队首</td><td style="text-align:left;">element()</td><td style="text-align:left;">peek()</td></tr></tbody></table><h3 id="_2-deque-实现类对比" tabindex="-1"><a class="header-anchor" href="#_2-deque-实现类对比"><span>2. Deque 实现类对比</span></a></h3><ul><li><strong>ArrayDeque</strong>：基于可变长数组+双指针，性能优于 LinkedList</li><li><strong>LinkedList</strong>：基于双向链表</li></ul><h2 id="其他重要知识点" tabindex="-1"><a class="header-anchor" href="#其他重要知识点"><span>其他重要知识点</span></a></h2><h3 id="_1-fail-fast-vs-fail-safe" tabindex="-1"><a class="header-anchor" href="#_1-fail-fast-vs-fail-safe"><span>1. Fail-fast vs Fail-safe</span></a></h3><ul><li><strong>Fail-fast</strong>：快速失败（如 ArrayList 迭代时修改会抛 <code>ConcurrentModificationException</code>）</li><li><strong>Fail-safe</strong>：安全失败（如 <code>CopyOnWriteArrayList</code> 使用写时复制）</li></ul><h3 id="_2-排序接口对比" tabindex="-1"><a class="header-anchor" href="#_2-排序接口对比"><span>2. 排序接口对比</span></a></h3><ul><li><strong>Comparable</strong>：自然排序（需实现 <code>compareTo()</code>）</li><li><strong>Comparator</strong>：定制排序（可定义多个比较器）</li></ul><h3 id="_3-阻塞队列-blockingqueue" tabindex="-1"><a class="header-anchor" href="#_3-阻塞队列-blockingqueue"><span>3. 阻塞队列 (BlockingQueue)</span></a></h3><p><strong>主要实现类：</strong></p><ul><li><strong>ArrayBlockingQueue</strong>：数组实现有界队列</li><li><strong>LinkedBlockingQueue</strong>：链表实现可选有界队列</li><li><strong>PriorityBlockingQueue</strong>：优先级无界队列</li><li><strong>SynchronousQueue</strong>：不存储元素的同步队列</li></ul>',34)]))}const o=e(n,[["render",s]]),h=JSON.parse(`{"path":"/java/basic/collection/","title":"集合概述","lang":"zh-CN","frontmatter":{"title":"集合概述","category":"Java","tag":["集合"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集合概述\\",\\"image\\":[\\"https://gitee.com/ishupei/picgo_img/raw/master/typora/java-collection-hierarchy.png\\"],\\"dateModified\\":\\"2025-09-04T16:37:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HuPei\\",\\"url\\":\\"https://ishupei.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://ishupei.github.io/java/basic/collection/"}],["meta",{"property":"og:site_name","content":"hupei's page"}],["meta",{"property":"og:title","content":"集合概述"}],["meta",{"property":"og:description","content":"Java 集合 Java 集合概述 Java 集合，也叫作容器，主要是由两大接口派生而来：一个是Collection接口，主要用于存放单一元素；另一个是Map接口，主要用于存放键值对。 java-collection-hierarchy 1. Collection 接口 存放单一元素 主要子接口： List：有序、可重复 Set：不可重复 Queue：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://gitee.com/ishupei/picgo_img/raw/master/typora/java-collection-hierarchy.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-04T16:37:23.000Z"}],["meta",{"property":"article:tag","content":"集合"}],["meta",{"property":"article:modified_time","content":"2025-09-04T16:37:23.000Z"}]],"description":"Java 集合 Java 集合概述 Java 集合，也叫作容器，主要是由两大接口派生而来：一个是Collection接口，主要用于存放单一元素；另一个是Map接口，主要用于存放键值对。 java-collection-hierarchy 1. Collection 接口 存放单一元素 主要子接口： List：有序、可重复 Set：不可重复 Queue：..."},"git":{"createdTime":1757003843000,"updatedTime":1757003843000,"contributors":[{"name":"hupei","username":"hupei","email":"ishupei@qq.com","commits":1,"url":"https://github.com/hupei"}]},"readingTime":{"minutes":2.08,"words":623},"filePathRelative":"java/basic/collection/index.md","autoDesc":true}`);export{o as comp,h as data};
