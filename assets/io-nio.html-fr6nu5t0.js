import{_ as e,c as p,b as o,o as r}from"./app-Bmvlbfib.js";const a={};function i(n,t){return r(),p("div",null,t[0]||(t[0]=[o('<h2 id="i-o" tabindex="-1"><a class="header-anchor" href="#i-o"><span>I/O</span></a></h2><p>IO 即 <code>Input/Output</code>，输入和输出。数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。数据传输过程类似于水流，因此称为 IO 流。IO 流在 Java 中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。字节流：处理原始二进制数据（如zip文件、图片）保持原始I/O的高效性，字符流：处理人类可读文本（自动处理字符编码）提供缓冲等文本特化功能</p><p>Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li><code>InputStream</code>/<code>Reader</code>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li><code>OutputStream</code>/<code>Writer</code>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p>用于序列化和反序列化的类必须实现 <code>Serializable</code> 接口，对象中如果有属性不想被序列化，使用 <code>transient</code> 修饰</p><p><strong>标记接口机制</strong>：Serializable 是空接口（标记接口），仅用于标识该类允许被序列化</p><p><strong>安全控制</strong>：防止任意对象被意外序列化（可能泄露敏感信息）</p><p><strong>版本控制</strong>：实现 Serializable 后自动支持 serialVersionUID 字段验证</p><p><strong>transient 关键字</strong>：只有实现 Serializable 后，transient 修饰的字段才会被排除序列化</p><p><strong>继承关系</strong>：父类实现 Serializable 时子类自动可序列化（但建议显式声明）</p><p><strong>静态字段</strong>：即使实现接口，static 字段也不会被序列化（属于类而非对象）</p><p><strong>典型应用场景</strong></p><p><strong>字节流</strong></p><p>文件复制（FileInputStream/FileOutputStream）</p><p>网络数据传输（Socket.getInputStream()）</p><p>序列化对象（ObjectOutputStream）</p><p><strong>字符流</strong></p><p>配置文件读取（FileReader）</p><p>控制台输入（InputStreamReader）</p><p>日志文件写入（PrintWriter）</p><p>字符流本质是通过<code>InputStreamReader/OutputStreamWriter</code>包装字节流实现</p><p>底层公式：字符流 = 字节流 + 编码处理</p><p><strong>为什么需要缓冲流</strong>：字符流默认带缓冲（BufferedReader），字节流需手动包装（BufferedInputStream）</p><p><strong>编码问题现象</strong>：用字节流直接读文本会导致乱码（如中文UTF-8文件用FileInputStream读取）</p><p><strong>性能对比</strong>：字符流处理文本效率比&quot;字节流+手动解码&quot;高30%以上（测试案例：读取10MB文本文件）</p><p>Q：缓冲区数据何时实际写入磁盘？</p><p>A：缓冲区满、调用flush()或close()时</p><p>Q：为什么读取文件推荐用缓冲流？</p><p>A：减少磁盘I/O次数（机械硬盘寻道时间约10ms/次）</p><p>Q：缓冲流可能引起的数据一致性问题？</p><p>A：未及时flush()可能导致数据未持久化</p>',31)]))}const c=e(a,[["render",i]]),u=JSON.parse(`{"path":"/java/basic/io-nio.html","title":"I/O、NIO","lang":"zh-CN","frontmatter":{"title":"I/O、NIO","category":"Java","tag":["Java基础"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"I/O、NIO\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-04T16:37:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HuPei\\",\\"url\\":\\"https://ishupei.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://ishupei.github.io/java/basic/io-nio.html"}],["meta",{"property":"og:site_name","content":"hupei's page"}],["meta",{"property":"og:title","content":"I/O、NIO"}],["meta",{"property":"og:description","content":"I/O IO 即 Input/Output，输入和输出。数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。数据传输过程类似于水流，因此称为 IO 流。IO 流在 Java 中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。字节流：处理原始二进制数据（如zip文件、图片）保持原始I/O的高效性，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-04T16:37:23.000Z"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:modified_time","content":"2025-09-04T16:37:23.000Z"}]],"description":"I/O IO 即 Input/Output，输入和输出。数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。数据传输过程类似于水流，因此称为 IO 流。IO 流在 Java 中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。字节流：处理原始二进制数据（如zip文件、图片）保持原始I/O的高效性，..."},"git":{"createdTime":1757003843000,"updatedTime":1757003843000,"contributors":[{"name":"hupei","username":"hupei","email":"ishupei@qq.com","commits":1,"url":"https://github.com/hupei"}]},"readingTime":{"minutes":2.32,"words":695},"filePathRelative":"java/basic/io-nio.md","autoDesc":true}`);export{c as comp,u as data};
