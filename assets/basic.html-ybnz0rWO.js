import{_ as e,c as s,b as i,o as n}from"./app-Bmvlbfib.js";const l={};function a(d,t){return n(),s("div",null,t[0]||(t[0]=[i(`<h2 id="基本类型与包装类型" tabindex="-1"><a class="header-anchor" href="#基本类型与包装类型"><span>基本类型与包装类型</span></a></h2><p><strong>核心区别</strong></p><table><thead><tr><th style="text-align:center;">对比维度</th><th style="text-align:center;">基本类型</th><th style="text-align:center;">包装类型</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>存储方式</strong></td><td style="text-align:center;">栈内存直接存储值</td><td style="text-align:center;">堆内存存储对象引用</td></tr><tr><td style="text-align:center;"><strong>默认值</strong></td><td style="text-align:center;"><code>int-&gt;0</code>, <code>boolean-&gt;false</code></td><td style="text-align:center;">统一为<code>null</code></td></tr><tr><td style="text-align:center;"><strong>泛型支持</strong></td><td style="text-align:center;">不支持（如<code>List&lt;int&gt;</code>非法）</td><td style="text-align:center;">支持（如<code>List&lt;Integer&gt;</code>合法）</td></tr><tr><td style="text-align:center;"><strong>内存占用</strong></td><td style="text-align:center;">固定大小（int=4字节）</td><td style="text-align:center;">额外对象头（通常16字节）</td></tr><tr><td style="text-align:center;"><strong>性能开销</strong></td><td style="text-align:center;">无额外开销</td><td style="text-align:center;">对象创建/GC开销</td></tr><tr><td style="text-align:center;"><strong>方法调用</strong></td><td style="text-align:center;">值传递</td><td style="text-align:center;">引用传递（实际是值传递引用副本）</td></tr></tbody></table><p><strong>自动装箱/拆箱</strong></p><p>编译器自动完成基本类型与包装类型的转换，装箱调用<code>valueOf()</code>，拆箱调用<code>xxxValue()</code>。**性能隐患：**循环内频繁装箱(未命中缓存)可能会导致大量对象创建</p><p><strong>缓存机制</strong></p><p>Java对部分包装类实现了对象缓存机制，这是Java语言设计中的一种<strong>内存优化手段</strong>，主要应用于频繁使用的数值范围。该机制通过<strong>复用已创建的对象</strong>来减少内存分配和垃圾回收压力。<strong>底层实现</strong>：使用静态缓存数组（首次调用时初始化）</p><table><thead><tr><th style="text-align:center;">基本类型</th><th style="text-align:center;">位数</th><th style="text-align:center;">字节</th><th style="text-align:center;">包装类</th><th style="text-align:center;">缓存范围</th><th style="text-align:center;">缓存是否可配置</th><th style="text-align:center;">实现方式</th></tr></thead><tbody><tr><td style="text-align:center;">byte</td><td style="text-align:center;">8</td><td style="text-align:center;">1</td><td style="text-align:center;">Byte</td><td style="text-align:center;">-128~127</td><td style="text-align:center;">不可变</td><td style="text-align:center;">静态final数组</td></tr><tr><td style="text-align:center;">short</td><td style="text-align:center;">16</td><td style="text-align:center;">2</td><td style="text-align:center;">Short</td><td style="text-align:center;">-128~127</td><td style="text-align:center;">不可变</td><td style="text-align:center;">静态final数组</td></tr><tr><td style="text-align:center;">int</td><td style="text-align:center;">32</td><td style="text-align:center;">4</td><td style="text-align:center;">Integer</td><td style="text-align:center;">-128~127*</td><td style="text-align:center;">可配置</td><td style="text-align:center;">IntegerCache</td></tr><tr><td style="text-align:center;">long</td><td style="text-align:center;">64</td><td style="text-align:center;">8</td><td style="text-align:center;">Long</td><td style="text-align:center;">-128~127</td><td style="text-align:center;">不可变</td><td style="text-align:center;">静态final数组</td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">32</td><td style="text-align:center;">4</td><td style="text-align:center;">Float</td><td style="text-align:center;">无缓存</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">double</td><td style="text-align:center;">64</td><td style="text-align:center;">8</td><td style="text-align:center;">Double</td><td style="text-align:center;">无缓存</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">char</td><td style="text-align:center;">16</td><td style="text-align:center;">2</td><td style="text-align:center;">Character</td><td style="text-align:center;">0~127</td><td style="text-align:center;">不可变</td><td style="text-align:center;">静态final数组</td></tr><tr><td style="text-align:center;">boolean</td><td style="text-align:center;">1</td><td style="text-align:center;">1(实际)</td><td style="text-align:center;">Boolean</td><td style="text-align:center;">TRUE/FALSE</td><td style="text-align:center;">不可变</td><td style="text-align:center;">静态final实例</td></tr></tbody></table><blockquote><p>对于 <code>Integer</code>，可以通过 JVM 参数 <code>-XX:AutoBoxCacheMax=&lt;size&gt;</code> 修改缓存上限，但不能修改下限 -128。实际使用时，并不建议设置过大的值，避免浪费内存，甚至是 OOM。</p></blockquote><p><strong><code>Integer a=127</code>和<code>Integer b=127</code>用==比较结果？</strong><br> （答：true，命中缓存）</p><p><strong>包装类型作为方法参数传递是值传递还是引用传递？</strong><br> （答：值传递，但传递的是引用的副本）</p><p><strong>为什么Float/Double不实现缓存？</strong></p><ul><li><p>浮点数范围过大（±3.4E38和±1.7E308），缓存所有可能值不现实</p></li><li><p>浮点数比较通常应该使用误差范围而非精确相等</p></li><li><p>浮点运算规范(IEEE 754)的特殊性导致缓存意义不大</p></li><li><p>浮点运算本身比整数运算开销大，缓存带来的收益相对较小</p></li></ul><p><strong>缓存机制会导致内存泄漏吗？</strong><br> 不会，因为：</p><ul><li><p>缓存对象通过静态引用持有，生命周期与类相同</p></li><li><p>缓存范围有限且可控（默认256个对象）</p></li><li><p>包装类本身是不可变对象，不存在状态变化问题</p></li><li><p>类卸载时缓存会自然释放（虽然包装类很少被卸载）</p></li></ul><h2 id="与equals区别" tabindex="-1"><a class="header-anchor" href="#与equals区别"><span>==与equals区别</span></a></h2><ul><li>对于基本数据类型来说，<code>==</code> 比较的是值。</li><li>对于引用数据类型来说，<code>==</code> 比较的是对象的内存地址。</li></ul><p><strong><code>equals()</code></strong> 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<code>equals()</code>方法存在于基类<code>Object</code>类中，因此所有的类都有<code>equals()</code>方法。</p><p><code>equals()</code> 方法存在两种使用情况：</p><ul><li><strong>没有重写 <code>equals()</code>方法</strong>：使用的默认是 <code>Object</code>类<code>equals()</code>方法，等价于通过“==”比较这两个对象。</li><li><strong>类重写了 <code>equals()</code>方法</strong>：一般我们都重写 <code>equals()</code>方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即认为这两个对象相等)。</li></ul><p><strong>使用场景选择</strong></p><p><strong>用基本类型</strong> 1.循环体内；2.大规模数据计算 ；3.方法局部变量</p><p><strong>用包装类型</strong> 1.集合类存储；2.需要表示NULL语义；3.泛型场景</p><p><strong>1. 为什么必须同时重写 <code>equals()</code> 和 <code>hashCode()</code>？</strong><br> 基于 Java 对象契约：当 <code>a.equals(b)</code> 返回 <code>true</code> 时，必须保证 <code>a.hashCode() == b.hashCode()</code>。</p><p><strong>2. <code>hashCode()</code> 在哈希集合（如 HashMap）中的作用？</strong></p><ul><li>先通过 <code>hashCode()</code> 快速定位桶位置，大幅减少 <code>equals()</code> 的调用次数，提升性能</li><li>若哈希值不同，直接存入；若相同，再用 <code>equals()</code> 判断是否真正相等</li></ul><p><strong>3. 只重写 <code>equals()</code> 不重写 <code>hashCode()</code> 的后果？</strong><br> 两个“相等”对象可能拥有不同的哈希值，导致同时存入 HashMap 的不同位置，违反契约，造成数据重复和检索失败。</p><p><strong>4. 默认的 <code>hashCode()</code> 实现？</strong><br> Object 的默认实现通常与内存地址相关，不同对象的哈希值一般不同。</p><p><strong>5. 哈希冲突处理？</strong><br> 哈希值相同但对象不等时发生冲突，HashMap 采用链地址法（链表+红黑树）解决。</p><p><strong>核心总结</strong>：<br><strong>重写 <code>equals()</code> 必须重写 <code>hashCode()</code>，且必须保证：相等对象必有相同哈希值（反之不一定成立）。</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(y)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">没有重写</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()方法</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 两个对象的内存地址一定相同 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 两个对象的HashCode一定相同</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(y)</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">只重写</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()、没有重写</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()方法</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 两个对象的内存地址不一定相同 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 两个对象的HashCode不一定相同 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">这个类无法和所有集合类一起工作</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心原因：哈希集合的可靠性</strong></p><p>Java集合框架中的<strong>哈希表</strong>实现（如<code>HashMap</code>、<code>HashSet</code>、<code>Hashtable</code>等）依赖这两个方法协同工作：</p><p><strong>先比较哈希码</strong>：集合首先调用<code>hashCode()</code>确定对象存储的&quot;桶&quot;位置</p><p><strong>再比较相等性</strong>：当哈希冲突时，调用<code>equals()</code>确认是否真正相等</p><p><strong>三条关键契约规则</strong></p><p><strong>一致性</strong>：如果两个对象<code>equals()</code>比较相等，它们的<code>hashCode()</code>必须返回相同值，反过来不成立：哈希码相同的对象不一定<code>equals()</code></p><p><strong>不变性</strong>：在对象未被修改时，多次调用<code>hashCode()</code>应返回相同值</p><p><strong>哈希分布</strong>：不相等的对象应尽量产生不同的哈希码（但不是强制要求）</p><p>始终记住：<strong>相等的对象必须具有相等的哈希码</strong>，这是Java集合框架正常工作的基础契约。</p><h2 id="string、stringbuffer、stringbuilder" tabindex="-1"><a class="header-anchor" href="#string、stringbuffer、stringbuilder"><span>String、StringBuffer、StringBuilder</span></a></h2><table><thead><tr><th style="text-align:center;">特性</th><th style="text-align:center;">String</th><th style="text-align:center;">StringBuffer</th><th style="text-align:center;">StringBuilder</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>可变性</strong></td><td style="text-align:center;">不可变</td><td style="text-align:center;">可变</td><td style="text-align:center;">可变</td></tr><tr><td style="text-align:center;"><strong>线程安全</strong></td><td style="text-align:center;">线程安全(因为不可变)</td><td style="text-align:center;">线程安全(同步锁)</td><td style="text-align:center;">非线程安全（未加锁）</td></tr><tr><td style="text-align:center;"><strong>性能</strong></td><td style="text-align:center;">最低(频繁创建新对象)</td><td style="text-align:center;">中等(有同步开销)</td><td style="text-align:center;">最高(无同步开销)</td></tr><tr><td style="text-align:center;"><strong>使用场景</strong></td><td style="text-align:center;">少量字符串操作</td><td style="text-align:center;">多线程环境下的字符串操作</td><td style="text-align:center;">单线程环境下的字符串操作</td></tr><tr><td style="text-align:center;"><strong>继承关系</strong></td><td style="text-align:center;">直接继承Object</td><td style="text-align:center;">继承AbstractStringBuilder</td><td style="text-align:center;">继承AbstractStringBuilder</td></tr><tr><td style="text-align:center;"><strong>方法同步</strong></td><td style="text-align:center;">不适用</td><td style="text-align:center;">是(synchronized方法)</td><td style="text-align:center;">否</td></tr></tbody></table><p><code>AbstractStringBuilder</code> 是 <code>StringBuilder</code> 与 <code>StringBuffer</code> 的公共父类，定义了一些字符串的基本操作，如 <code>expandCapacity</code>、<code>append</code>、<code>insert</code>、<code>indexOf</code> 等公共方法。</p><p><strong>可变性</strong></p><p><code>String</code> 是不可变的。1.String类声明为final，杜绝了继承修改行为；2.内部保存字符数组声明为private final，禁止外部修改；3.未对外提供修改方法，所有修改方法（concat/substring等）其实都返回新对象。</p><p><code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用字符数组保存字符串，不过没有使用 <code>final</code> 和 <code>private</code> 关键字修饰，最关键的是这个 <code>AbstractStringBuilder</code> 类还提供了很多修改字符串的方法比如 <code>append</code> 方法。</p><p><strong>性能</strong></p><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code> 对象本身进行操作，而不是<strong>生成新的对象并改变对象引用</strong>。相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p>在 Java 9 之后，<code>String</code>、<code>StringBuilder</code> 与 <code>StringBuffer</code> 的实现由 <code>char</code> 数组改用 <code>byte</code> 数组存储字符串</p><p>新版的 String 其实支持两个编码方案：Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1 编码方案下，<code>byte</code> 占一个字节(8 位)，<code>char</code> 占用 2 个字节（16），<code>byte</code> 相较 <code>char</code> 节省一半的内存空间。</p><p>JDK 官方就说了绝大部分字符串对象只包含 Latin-1 可表示的字符。如果字符串中包含的汉字超过 Latin-1 可表示范围内的字符，<code>byte</code> 和 <code>char</code> 所占用的空间是一样的。</p><h2 id="string-intern" tabindex="-1"><a class="header-anchor" href="#string-intern"><span>String#intern</span></a></h2><p><code>String.intern()</code> 是一个 <code>native</code> (本地) 方法，用来处理字符串常量池中的字符串对象引用。</p><ul><li><code>intern()</code> 方法的主要作用是确保字符串引用在常量池中的唯一性。</li><li>当调用 <code>intern()</code> 时，如果常量池中已经存在相同内容的字符串，则返回常量池中已有对象的引用；否则，将该字符串添加到常量池并返回其引用。</li></ul><h2 id="字符串常量池" tabindex="-1"><a class="header-anchor" href="#字符串常量池"><span><strong>字符串常量池</strong></span></a></h2><p>JVM为了提高性能和减少内存开销，在实例化字符串常量的时候，为字符串开辟一个字符串常量池，类似于缓存区。<br> 字符串常量池底层是 HotSpot的C++实现的，它是一个<code>StringTable</code>(类似java中的 HashTable)，保存的本质上是字符串对象的引用。</p><p><strong>字符串常量池位置</strong><br> Jdk1.6及之前：方法区被实现为永久代，运行时常量池在永久代，运行时常量池包含字符串常量池；<br> Jdk1.7：已经逐步开始“去永久代”，字符串常量池和静态变量被移到了堆内存中;<br> Jdk1.8及之后：永久代被移除，取而代之的是元空间。而字符串常量池里依然在堆内存中;</p><p><strong>总结</strong></p><ul><li><p>从JDK1.7开始，字符串常量池被移动了堆内存中;</p></li><li><p>字面量赋值，会先去字符串常量池中判断是否存在相同值的字符串对象，存在则返回常量池中的引用，不存在则在常量池中创建一个新对象，并返回引用；</p></li><li><p>使用new关键字创建字符串对象，会先去字符串常量池中判断是否存在相同值的字符串对象，存在则去堆中创建一个新对象并返回；不存在也在字符串常量池和堆内存中各创建一个字符串对象，并返回堆内存中的对象引用；</p></li><li><p>常量之间的连接，Java编译器在编译期间会做优化;</p></li><li><p>连接时含有变量的,会被编译成(new StringBuilder().append(a).append(b).append(c).toString();</p></li><li><p>当调用intern(时，首先判断常量池中是否存在相同值的字符串常量，如果存在则返回该字符串的引用；如果不存在，则在常量池中增加一个相同值的字符串常量，并返回它在堆内存中的引用；</p></li><li><p>对于final修饰的变量，它在编译时被解析为常量值的一个本地拷贝存储到自己的常量池中或嵌入到它的字节码流中;</p></li><li><p>Java中的部分关键字在初始化的类中可能被提前使用而放入常量池。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //1.字符串常量池中放入了一个“hello” 2.在堆内存中创建了一个String对象存储了“hello”,使用s指向了这个对象引用</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //s1指向的是字符串常量池中“hello”的引用地址</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //s2指向的是字符串常量池中“hello”的引用地址</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s2);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   //false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s2);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="object-类方法清单" tabindex="-1"><a class="header-anchor" href="#object-类方法清单"><span>Object 类方法清单</span></a></h2><table><thead><tr><th style="text-align:left;">方法签名</th><th style="text-align:left;">作用简述</th><th style="text-align:left;">重要考点</th></tr></thead><tbody><tr><td style="text-align:left;"><code>public final native Class&lt;?&gt; getClass()</code></td><td style="text-align:left;">返回此对象的运行时类。</td><td style="text-align:left;">反射的起点。</td></tr><tr><td style="text-align:left;"><code>public native int hashCode()</code></td><td style="text-align:left;">返回对象的哈希码值。</td><td style="text-align:left;">1. 与 <code>equals()</code> 联动： 2. <strong>重写 <code>equals()</code> 必须重写 <code>hashCode()</code></strong> 3. 哈希集合（如HashMap）依赖此方法。</td></tr><tr><td style="text-align:left;"><code>public boolean equals(Object obj)</code></td><td style="text-align:left;">判断两个对象是否“相等”。</td><td style="text-align:left;">默认比较地址（<code>==</code>）。通常需要重写以实现逻辑相等。</td></tr><tr><td style="text-align:left;"><code>protected native Object clone() throws CloneNotSupportedException</code></td><td style="text-align:left;">创建并返回此对象的一个副本。</td><td style="text-align:left;">1. 需实现 <code>Cloneable</code> 接口（标记接口），否则抛异常。 2. <strong>浅拷贝</strong> (默认)。</td></tr><tr><td style="text-align:left;"><code>public String toString()</code></td><td style="text-align:left;">返回对象的字符串表示。</td><td style="text-align:left;">默认输出：<code>类名@哈希码十六进制</code>。通常会被重写。</td></tr><tr><td style="text-align:left;"><code>public final native void notify()</code></td><td style="text-align:left;"><strong>唤醒</strong>在此对象监视器上等待的<strong>单个</strong>线程。</td><td style="text-align:left;"><strong>多线程协作</strong>（<code>wait/notify</code>机制），必须在<code>synchronized</code>代码块内使用。</td></tr><tr><td style="text-align:left;"><code>public final native void notifyAll()</code></td><td style="text-align:left;"><strong>唤醒</strong>在此对象监视器上等待的<strong>所有</strong>线程。</td><td style="text-align:left;">同上。</td></tr><tr><td style="text-align:left;"><code>public final native void wait(long timeout) throws InterruptedException</code></td><td style="text-align:left;">让当前线程<strong>等待</strong>，直到被通知或超过指定的时间。</td><td style="text-align:left;">同上。会<strong>释放锁</strong>。</td></tr><tr><td style="text-align:left;"><code>public final void wait(long timeout, int nanos)</code></td><td style="text-align:left;">更精确定时的等待。</td><td style="text-align:left;">同上。</td></tr><tr><td style="text-align:left;"><code>public final void wait() throws InterruptedException</code></td><td style="text-align:left;">让当前线程无限期等待，直到被通知。</td><td style="text-align:left;">同上。</td></tr><tr><td style="text-align:left;"><code>protected void finalize() throws Throwable</code></td><td style="text-align:left;">当垃圾回收器确定不存在对该对象的更多引用时，由对象上的垃圾回收器调用。</td><td style="text-align:left;"><strong>JDK9已弃用</strong>。不靠谱，不要手动调用，不要依赖它做资源清理。</td></tr></tbody></table><ol><li><strong><code>getClass()</code></strong>：反射基础。</li><li><strong><code>hashCode()</code> 与 <code>equals()</code></strong>： <ul><li><strong>规则1</strong>：两个对象 <code>equals()</code> 为 <code>true</code>，则它们的 <code>hashCode()</code> 必须相同。</li><li><strong>规则2</strong>：两个对象 <code>hashCode()</code> 相同，它们 <code>equals()</code> 不一定为 <code>true</code>（哈希冲突）。</li><li>重写一个必须重写另一个，否则会破坏基于哈希的集合（如 <code>HashMap</code>, <code>HashSet</code>）的正常工作。</li></ul></li><li><strong><code>clone()</code></strong>： <ul><li>需要实现 <code>Cloneable</code> 接口。</li><li>是<strong>浅拷贝</strong>（复制字段引用，不复制引用的对象本身）。如需深拷贝，需在方法内重写逻辑。</li></ul></li><li><strong><code>toString()</code></strong>：打印/日志调试常用，建议为每个实体类重写。</li><li><strong><code>wait()</code>, <code>notify()</code>, <code>notifyAll()</code></strong>： <ul><li><strong>必须在同步代码块（synchronized）内调用</strong>，否则会抛 <code>IllegalMonitorStateException</code>。</li><li><code>wait()</code> 会<strong>释放</strong>当前持有的锁。</li></ul></li><li><strong><code>finalize()</code></strong>：<strong>已过时</strong>。面试时知道它作用且不推荐使用即可。</li></ol><h2 id="java动态代理" tabindex="-1"><a class="header-anchor" href="#java动态代理"><span>Java动态代理</span></a></h2><ol><li><strong>JDK 动态代理</strong><ul><li><strong>基于接口</strong>：要求目标类<strong>必须实现至少一个接口</strong>。</li><li><strong>实现方式</strong>：通过 <code>java.lang.reflect.Proxy</code> 类生成代理对象，结合 <code>InvocationHandler</code> 接口实现增强逻辑。</li></ul></li><li><strong>CGLib 动态代理</strong><ul><li><strong>基于继承</strong>：通过<strong>继承</strong>目标类来创建子类代理，无需实现接口。</li><li><strong>实现方式</strong>：借助ASM字节码操作框架，在运行时动态生成目标类的子类，并重写方法来实现增强。</li></ul></li></ol><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">JDK 动态代理</th><th style="text-align:left;">CGLib 动态代理</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>机制原理</strong></td><td style="text-align:left;">通过<strong>实现接口</strong>，创建接口的代理实例</td><td style="text-align:left;">通过<strong>继承目标类</strong>，生成子类字节码</td></tr><tr><td style="text-align:left;"><strong>目标类要求</strong></td><td style="text-align:left;"><strong>必须实现接口</strong></td><td style="text-align:left;"><strong>类不能是 final</strong>（无法继承）</td></tr><tr><td style="text-align:left;"><strong>方法限制</strong></td><td style="text-align:left;">只能代理接口中定义的方法</td><td style="text-align:left;">可以代理目标类中<strong>非 final</strong>、<strong>非 static</strong> 的方法</td></tr><tr><td style="text-align:left;"><strong>性能</strong></td><td style="text-align:left;"><strong>生成代理对象较快</strong>，但方法调用稍慢</td><td style="text-align:left;"><strong>生成代理对象较慢</strong>，但方法调用执行更快</td></tr><tr><td style="text-align:left;"><strong>依赖</strong></td><td style="text-align:left;">Java 标准库，<strong>无额外依赖</strong></td><td style="text-align:left;">需要引入 <strong>CGLib</strong> 第三方库</td></tr><tr><td style="text-align:left;"><strong>别名</strong></td><td style="text-align:left;">接口代理</td><td style="text-align:left;">子类代理</td></tr></tbody></table><ul><li><strong>有接口用JDK</strong>：Spring AOP默认策略，标准、简单。</li><li><strong>无接口用CGLib</strong>：代理普通类，性能更高，但需引入第三方库。</li></ul><p><strong>Spring框架的选择：</strong></p><ul><li>如果目标对象实现了接口，默认使用 <strong>JDK 动态代理</strong>。</li><li>如果目标对象没有实现接口，则使用 <strong>CGLib</strong>。</li><li>可以通过配置强制Spring全部使用CGLib。</li></ul>`,68)]))}const o=e(l,[["render",a]]),g=JSON.parse(`{"path":"/java/basic/basic.html","title":"语言基础","lang":"zh-CN","frontmatter":{"title":"语言基础","category":"Java","tag":["Java基础"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"语言基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-04T16:37:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HuPei\\",\\"url\\":\\"https://ishupei.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://ishupei.github.io/java/basic/basic.html"}],["meta",{"property":"og:site_name","content":"hupei's page"}],["meta",{"property":"og:title","content":"语言基础"}],["meta",{"property":"og:description","content":"基本类型与包装类型 核心区别 自动装箱/拆箱 编译器自动完成基本类型与包装类型的转换，装箱调用valueOf()，拆箱调用xxxValue()。**性能隐患：**循环内频繁装箱(未命中缓存)可能会导致大量对象创建 缓存机制 Java对部分包装类实现了对象缓存机制，这是Java语言设计中的一种内存优化手段，主要应用于频繁使用的数值范围。该机制通过复用已创..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-04T16:37:23.000Z"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:modified_time","content":"2025-09-04T16:37:23.000Z"}]],"description":"基本类型与包装类型 核心区别 自动装箱/拆箱 编译器自动完成基本类型与包装类型的转换，装箱调用valueOf()，拆箱调用xxxValue()。**性能隐患：**循环内频繁装箱(未命中缓存)可能会导致大量对象创建 缓存机制 Java对部分包装类实现了对象缓存机制，这是Java语言设计中的一种内存优化手段，主要应用于频繁使用的数值范围。该机制通过复用已创..."},"git":{"createdTime":1756923903000,"updatedTime":1757003843000,"contributors":[{"name":"hupei","username":"hupei","email":"ishupei@qq.com","commits":4,"url":"https://github.com/hupei"}]},"readingTime":{"minutes":12.89,"words":3866},"filePathRelative":"java/basic/basic.md","autoDesc":true}`);export{o as comp,g as data};
