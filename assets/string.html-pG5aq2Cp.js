import{_ as s,c as a,b as i,o as e}from"./app-Bmvlbfib.js";const l={};function p(t,n){return e(),a("div",null,n[0]||(n[0]=[i(`<h1 id="串" tabindex="-1"><a class="header-anchor" href="#串"><span>串</span></a></h1><h2 id="_4-1-串的定义和实现" tabindex="-1"><a class="header-anchor" href="#_4-1-串的定义和实现"><span><strong>4.1 串的定义和实现</strong></span></a></h2><h3 id="_4-1-1-串的定义" tabindex="-1"><a class="header-anchor" href="#_4-1-1-串的定义"><span><strong>4.1.1 串的定义</strong></span></a></h3><ol><li><p>串: 零个或多个字符组成的有限序列，如 <code>S = &#39;iPhone 11 Pro Max?&#39;</code>；</p></li><li><p>串名：S是串名；</p></li><li><p>串的长度：串中字符的个数n；</p></li><li><p>空串：n=0时的串；</p></li><li><p>子串：串中任意多个连续的字符组成的子序列称为该串的子串；</p></li><li><p>主串：包含子串的串；</p></li><li><p>字符在主串中的位置：某个字符在串中的序号（从1开始）；</p></li><li><p>子串在主串中的位置：子串的第一个字符在主串中的位置；</p></li><li><p>空串 V.S 空格串：</p><ol><li><p><code>M = &#39;&#39;</code> 是空串；</p></li><li><p><code>N = &#39; &#39;</code> 是空格串；</p></li></ol></li><li><p>串 V.S 线性表：</p></li><li><p>串是特殊的线性表，数据元素之间呈线性关系（逻辑结构相似）；</p></li><li><p>串的数据对象<strong>限定</strong>为字符集：中文字符、英文字符、数字字符、标点字符…</p></li><li><p>串的基本操作，如增删改除通常以<strong>子串</strong>为操作对象</p></li></ol><h3 id="_4-1-2-串的基本操作" tabindex="-1"><a class="header-anchor" href="#_4-1-2-串的基本操作"><span><strong>4.1.2 串的基本操作</strong></span></a></h3><p>假设有串 <code>T = &#39;&#39;</code>, <code>S = &#39;iPhone 11 Pro Max?&#39;</code>, <code>W = &#39;Pro&#39;</code></p><ul><li><p><code>StrAssign(&amp;T, chars)</code>: 赋值操作，把串T赋值为chars；</p></li><li><p><code>StrCopy(&amp;T, S)</code>: 复制操作，把串S复制得到串T；</p></li><li><p><code>StrEmpty(S)</code>: 判空操作，若S为空串，则返回TRUE，否则返回False；</p></li></ul><p><code>StrLength(S)</code>: 求串长，返回串S的元素个数；</p><blockquote><p>返回<code>length</code>值<br><code>ClearString(&amp;S)</code>: 清空操作，将S清为<strong>空串</strong>；</p></blockquote><blockquote><p>将<code>length = 0</code>，逻辑上清空，但是内存中还有</p></blockquote><ul><li><code>DestroyString(&amp;S)</code>: 销毁串，将串S销毁——<strong>回收存储空间</strong>；</li></ul><p><code>Concat(&amp;T, S1, S2)</code>: 串联联接，用T返回由S1和S2联接而成的新串———可能会导致存储空间的扩展；</p><blockquote><p>Concat(&amp;T, S, W)<br> T = ‘iPhone 11 Pro Max?Pro’<br><code>SubString(&amp;Sub, S, pos, len)</code>: 求子串，用Sub返回串S的第pos个字符起长度为len的子串；</p></blockquote><blockquote><p>SubString(&amp;T, S, 4, 6)<br> T = ‘one 11’<br><code>Index(S, T)</code>: 定位操作，若主串S中存在与串T值相同的子串，则返回它再主串S中第一次出现的位置，否则函数值为0；</p></blockquote><blockquote><p>Index(S, T)<br> 11</p></blockquote><ul><li><code>StrCompare(S, T)</code>: 串的比较操作，参照英文词典排序方式；若S &gt; T,返回值&gt;0; S = T,返回值=0 <strong>(需要两个串完全相同)</strong> ; S &lt; T,返回值&lt;0;</li></ul><h3 id="拓展-字符集编码" tabindex="-1"><a class="header-anchor" href="#拓展-字符集编码"><span><strong>拓展：字符集编码</strong></span></a></h3><ol><li><p>字符集:</p></li><li><p>编码方案</p></li><li><p>乱码问题</p></li></ol><h3 id="_4-1-3-串的存储结构" tabindex="-1"><a class="header-anchor" href="#_4-1-3-串的存储结构"><span><strong>4.1.3 串的存储结构</strong></span></a></h3><ol><li>定长顺序存储表示</li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#define MAXLEN 255   //预定义最大串长为255</span></span>
<span class="line"><span>typedef struct{</span></span>
<span class="line"><span>    char ch[MAXLEN];   //静态数组实现（定长顺序存储）每个分量存储一个字符                   </span></span>
<span class="line"><span>    int length;         //串的实际长度 每个char字符占1B   </span></span>
<span class="line"><span>}SString;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>串长的两种表示法：</p><ul><li><p>方案一：用一个额外的变量<code>length</code>来存放串的长度（保留<code>ch[0]</code>）；</p></li><li><p>方案二：用<code>ch[0]</code>充当<code>length</code>；</p><ul><li>优点：字符的位序和数组下标相同；</li></ul></li><li><p>方案三：没有<code>length</code>变量，以字符<code>&#39;\\0&#39;</code>表示结尾（对应ASCII码的0）；</p><ul><li>缺点：需要从头到尾遍历；</li></ul></li><li><p><strong>方案四——最终使用方案：</strong><code>ch[0]</code>废弃不用，声明int型变量<code>length</code>来存放串的长度（方案一与方案二的结合）</p></li></ul></li><li><p>基本操作实现（基于方案四）</p></li></ul><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#define MAXLEN 255            //预定义最大串长为255</span></span>
<span class="line"><span>typedef struct{</span></span>
<span class="line"><span>    char ch[MAXLEN];           //每个分量存储一个字符</span></span>
<span class="line"><span>    int length;                //串的实际长度 </span></span>
<span class="line"><span>}SString;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 求子串</span></span>
<span class="line"><span>bool SubString(SString &amp;Sub, SString S, int pos, int len){</span></span>
<span class="line"><span>    //子串范围越界</span></span>
<span class="line"><span>    if (pos+len-1 &gt; S.length)</span></span>
<span class="line"><span>        return false;</span></span>
<span class="line"><span>    for (int i=pos; i&lt;pos+len; i++)</span></span>
<span class="line"><span>        Sub.cn[i-pos+1] = S.ch[i];</span></span>
<span class="line"><span>    Sub.length = len;</span></span>
<span class="line"><span>    return true;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//比较操作。若S&gt;T，则返回值&gt;0;若S=T，则返回值=0;若S&lt;T，则返回值&lt;0。</span></span>
<span class="line"><span>int StrCompare(SString S, SString T){</span></span>
<span class="line"><span>    for(int i; i&lt;=S.length &amp;&amp; i&lt;=T.length; i++){</span></span>
<span class="line"><span>        if(S.ch[i] != T.ch[i])</span></span>
<span class="line"><span>            return S.ch[i] - T.ch[i];</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    //扫描过的所有字符都相同，则长度长的串更大</span></span>
<span class="line"><span>    return S.length - T.length;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//定位操作。若主串S中存在与串T相同的子串，返回它在主串S第一次出现的位置，否则为0。</span></span>
<span class="line"><span>int Index(SString S, SString T){</span></span>
<span class="line"><span>    int i=1;</span></span>
<span class="line"><span>    n = StrLength(S);</span></span>
<span class="line"><span>    m = StrLength(T);</span></span>
<span class="line"><span>    SString sub;        //用于暂存子串</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    while(i&lt;=n-m+1){</span></span>
<span class="line"><span>        SubString(Sub,S,i,m);</span></span>
<span class="line"><span>        if(StrCompare(Sub,T)!=0)</span></span>
<span class="line"><span>            ++i;</span></span>
<span class="line"><span>        else </span></span>
<span class="line"><span>            return i;    // 返回子串在主串中的位置</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return 0;            //S中不存在与T相等的子串</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>ps:结合顺序表思考优缺点</em></p><ol><li>堆分配存储表示</li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//动态数组实现</span></span>
<span class="line"><span>typedef struct{</span></span>
<span class="line"><span>    char *ch;           //按串长分配存储区，ch指向串的基地址</span></span>
<span class="line"><span>    int length;         //串的长度</span></span>
<span class="line"><span>}HString;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>HString S；        //指针指向连续空间的起始位置</span></span>
<span class="line"><span>S.ch = (char *) malloc(MAXLINE * sizeof(char)); </span></span>
<span class="line"><span>                                //malloc()需要手动free()</span></span>
<span class="line"><span>S.length;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>串的链式存储</li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef struct StringNode{</span></span>
<span class="line"><span>    char ch;           //每个结点存1个字符</span></span>
<span class="line"><span>    struct StringNode *next;</span></span>
<span class="line"><span>}StringNode, * String;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：存储密度低，每个字符1B，每个指针4B；<br> 解决方案：每一个链表的结点存储多个字符——每个结点称为块——块链结构</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>typedef struct StringNode{</span></span>
<span class="line"><span>    char ch[4];           //每个结点存多个个字符</span></span>
<span class="line"><span>    struct StringNode *next;</span></span>
<span class="line"><span>}StringNode, * String;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>ps:结合链表思考优缺点</em></p><ul><li><p>存储分配角度：链式存储的字符串无需占用连续空间，存储空间分配更灵活；</p></li><li><p>操作角度：若要在字符串中插入或删除某些字符，则顺序存储方式需要移动大量字符，而链式存储不用；</p></li><li><p>若要按位序查找字符，则顺序存储支持随机访问，而链式存储只支持顺序访问；</p></li></ul><h2 id="_4-2-串的模式匹配" tabindex="-1"><a class="header-anchor" href="#_4-2-串的模式匹配"><span><strong>4.2 串的模式匹配</strong></span></a></h2><h3 id="_4-2-1-朴素模式匹配算法" tabindex="-1"><a class="header-anchor" href="#_4-2-1-朴素模式匹配算法"><span><strong>4.2.1 朴素模式匹配算法</strong></span></a></h3><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int Index(SString S, SString T){</span></span>
<span class="line"><span>    int i=1;                //扫描主串S</span></span>
<span class="line"><span>    int j=1;                //扫描模式串T</span></span>
<span class="line"><span>    while(i&lt;=S.length &amp;&amp; j&lt;=T.length){</span></span>
<span class="line"><span>        if(S.ch[i] == T.ch[j]){</span></span>
<span class="line"><span>            ++i;</span></span>
<span class="line"><span>            ++j;             //继续比较后继字符</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        else{</span></span>
<span class="line"><span>            i = i-j+2;</span></span>
<span class="line"><span>            j=1;             //指针后退重新开始匹配</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    if(j&gt;T.length)</span></span>
<span class="line"><span>        return i-T.length;</span></span>
<span class="line"><span>    else</span></span>
<span class="line"><span>        return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>时间复杂度分析：</strong></p><ul><li><p>主串长度为n，模式串长度为m</p></li><li><p>最多比较<code>n-m+1</code>个子串</p></li><li><p>最坏时间复杂度 = <code>O(nm)</code></p><ul><li><p>每个子串都要对比m个字符(对比到最后一个字符才匹配不上)，共要对比n-m+1个子串，复杂度 = <code>O((n-m+1)m) = O(nm - m^2 + m) = O(nm)</code></p></li><li><p><em>PS:大多数时候，n&gt;&gt;m</em></p></li></ul></li><li><p>最好时间复杂度 = <code>O(n)</code></p><ul><li>每个子串的第一个字符就匹配失败，共要对比n-m+1个子串，复杂度 = <code>O(n-m+1) = O(n)</code></li></ul></li></ul><h3 id="_4-2-2-改进的模式匹配算法——kmp算法" tabindex="-1"><a class="header-anchor" href="#_4-2-2-改进的模式匹配算法——kmp算法"><span><strong>4.2.2 改进的模式匹配算法——KMP算法</strong></span></a></h3><ul><li>不匹配的字符之前，一定是和模式串一致的；</li></ul><p>根据模式串T，求出<code>next数组</code>（只与模式串有关，与主串无关），利用<code>next数组</code>进行匹配，<strong>当匹配失败时，主串的指针</strong><code>i</code> 不再回溯！</p><blockquote><p>当第一个元素匹配失败时，匹配下一个相邻子串，令<code>j=0,i++,j++</code></p></blockquote><ol><li>求<code>next数组</code>（会手算即可）</li></ol><ul><li><p>作用：当模式串的第<code>j</code>个字符失配时，从模式串的第<code>next[j]</code>继续往后匹配;</p></li><li><p>对于任何模式串，当第1个字符不匹配时，只能匹配下一个子串，因此，<code>next[1] = 0</code>——表示模式串应右移一位，主串当前指针后移一位，再和模式串的第一字符进行比较；</p></li><li><p>对于任何模式串，当第2个字符不匹配时，应尝试匹配模式串的第一个字符，因此，<code>next[2] = 0</code>;</p></li></ul><p>例：对于串 <code>T = &#39;abaabc&#39;</code></p><table><thead><tr><th style="text-align:left;"><strong>next[0]</strong></th><th style="text-align:left;"><strong>next[1]</strong></th><th style="text-align:left;"><strong>next[2]</strong></th><th style="text-align:left;"><strong>next[3]</strong></th><th style="text-align:left;"><strong>next[4]</strong></th><th style="text-align:left;"><strong>next[5]</strong></th><th style="text-align:left;"><strong>next[6]</strong></th></tr></thead><tbody><tr><td style="text-align:left;"></td><td style="text-align:left;">0</td><td style="text-align:left;">1</td><td style="text-align:left;">1</td><td style="text-align:left;">2</td><td style="text-align:left;">2</td><td style="text-align:left;">3</td></tr></tbody></table><ol><li>利用<code>next数组</code>进行模式匹配</li></ol><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int Index_KMP(SString S, SString T, int next[]){</span></span>
<span class="line"><span>    int i=1;     //主串</span></span>
<span class="line"><span>    int j=1;     //模式串</span></span>
<span class="line"><span>    while（i&lt;=S.length &amp;&amp; j&lt;=T.length){</span></span>
<span class="line"><span>        if(j==0 || S.ch[i]==T.ch[j]){      //第一个元素匹配失败时</span></span>
<span class="line"><span>            ++j;</span></span>
<span class="line"><span>            ++i;         //继续比较后继字符</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        else</span></span>
<span class="line"><span>            j=next[j];     //模式串向右移动</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    if(j&gt;T.length)</span></span>
<span class="line"><span>        return i-T.length;     //匹配成功</span></span>
<span class="line"><span>    else</span></span>
<span class="line"><span>        return 0;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 时间复杂度分析：</strong></p><ul><li><p>求next数组时间复杂度 = <code>O(m)</code></p></li><li><p>模式匹配过程最坏时间复杂度 = <code>O(n)</code></p></li><li><p>KMP算法的最坏时间复杂度 = <code>O(m+n)</code></p></li></ul><h3 id="_4-2-3-kmp算法的进一步优化" tabindex="-1"><a class="header-anchor" href="#_4-2-3-kmp算法的进一步优化"><span><strong>4.2.3 KMP算法的进一步优化</strong></span></a></h3>`,50)]))}const c=s(l,[["render",p]]),r=JSON.parse(`{"path":"/cs/data-structure/string.html","title":"串","lang":"zh-CN","frontmatter":{"description":"串 4.1 串的定义和实现 4.1.1 串的定义 串: 零个或多个字符组成的有限序列，如 S = 'iPhone 11 Pro Max?'； 串名：S是串名； 串的长度：串中字符的个数n； 空串：n=0时的串； 子串：串中任意多个连续的字符组成的子序列称为该串的子串； 主串：包含子串的串； 字符在主串中的位置：某个字符在串中的序号（从1开始）； 子串在...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"串\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-04T11:21:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HuPei\\",\\"url\\":\\"https://ishupei.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://ishupei.github.io/cs/data-structure/string.html"}],["meta",{"property":"og:site_name","content":"hupei's page"}],["meta",{"property":"og:title","content":"串"}],["meta",{"property":"og:description","content":"串 4.1 串的定义和实现 4.1.1 串的定义 串: 零个或多个字符组成的有限序列，如 S = 'iPhone 11 Pro Max?'； 串名：S是串名； 串的长度：串中字符的个数n； 空串：n=0时的串； 子串：串中任意多个连续的字符组成的子序列称为该串的子串； 主串：包含子串的串； 字符在主串中的位置：某个字符在串中的序号（从1开始）； 子串在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-04T11:21:57.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-04T11:21:57.000Z"}]]},"git":{"createdTime":1756984917000,"updatedTime":1756984917000,"contributors":[{"name":"hupei","username":"hupei","email":"ishupei@qq.com","commits":1,"url":"https://github.com/hupei"}]},"readingTime":{"minutes":6.7,"words":2011},"filePathRelative":"cs/data-structure/string.md","autoDesc":true}`);export{c as comp,r as data};
